import "utils/casts/u8_to_bits";
import "utils/casts/u8_from_bits";
import "utils/casts/u32_from_bits";
import "utils/casts/u32_to_bits";
import "hashes/blake2/blake2s" as blake2s;

def u32_from_u8_array(u8[4] input) -> u32  {
    bool[32] bits =  [
        ...u8_to_bits(input[0]),
        ...u8_to_bits(input[1]),
        ...u8_to_bits(input[2]),
        ...u8_to_bits(input[3])
    ];

	return u32_from_bits(bits);
}

def u32_to_u8_array(u32 input) -> u8[4] {
    bool[32] bits = u32_to_bits(input);
    return [
        u8_from_bits(bits[0..8]),
        u8_from_bits(bits[8..16]),
        u8_from_bits(bits[16..24]),
        u8_from_bits(bits[24..32])
    ];
}

def hashPair(u8[32] a, u8[32] b)-> u8[32] {
    u32[1][16] mut e = [[0;16]];
    e[0] = [
        u32_from_u8_array(a[0..4]),
        u32_from_u8_array(a[4..8]),
        u32_from_u8_array(a[8..12]),
        u32_from_u8_array(a[12..16]),
        u32_from_u8_array(a[16..20]),
        u32_from_u8_array(a[20..24]),
        u32_from_u8_array(a[24..28]),
        u32_from_u8_array(a[28..32]),
        u32_from_u8_array(b[0..4]),
        u32_from_u8_array(b[4..8]),
        u32_from_u8_array(b[8..12]),
        u32_from_u8_array(b[12..16]),
        u32_from_u8_array(b[16..20]),
        u32_from_u8_array(b[20..24]),
        u32_from_u8_array(b[24..28]),
        u32_from_u8_array(b[28..32])
    ];
	
    u32[8] result = blake2s(e);

    u8[32] res = [
        ...u32_to_u8_array(result[0]),
        ...u32_to_u8_array(result[1]),
        ...u32_to_u8_array(result[2]),
        ...u32_to_u8_array(result[3]),
        ...u32_to_u8_array(result[4]),
        ...u32_to_u8_array(result[5]),
        ...u32_to_u8_array(result[6]),
        ...u32_to_u8_array(result[7])
    ];

	log("hash {}, {} = {}", a, b , res);
    return res;
}

def main(u8[2][32] a, u32 addr, u8[32] c) -> u8[32] {
	u32 mut path = addr >> 5;
	u8[32] mut node = a[0];

	for u32 i in 1 .. 2 {
		node = (path & 1) == 0 ? hashPair(node, a[i]) :
							   hashPair(a[i], node);
		path = path >> 1;
	}

	log("x is {}, y is {}", node, c);

	assert(node == c);
    return node;
}